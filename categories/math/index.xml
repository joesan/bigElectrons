<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>math on bigelectrons</title><link>https://bigelectrons.com/categories/math/</link><description>Recent content in math on bigelectrons</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2018 - 2022 @ https://github.com/Joesan</copyright><lastBuildDate>Wed, 20 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bigelectrons.com/categories/math/index.xml" rel="self" type="application/rss+xml"/><item><title>Math behind the optimizer which is behind a Neural Net</title><link>https://bigelectrons.com/post/math/gradient-descent-part-1/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/math/gradient-descent-part-1/</guid><description>
What is Gradient? What is descent? To understand the mathematics behind gradient descent, you need to understand what a gradient is and what a descent is. Let us spend some time to get this straight! If you know the equation that represents a linear function which looks like this:
TODO: Show y = mx + b
Where m is the slope of the function and b is the intercept, you can see that the slope, or the gradient is the property of a linear function that indicates an increase, or a decrease while descent means moving downwards.</description></item><item><title>Posts</title><link>https://bigelectrons.com/post/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/</guid><description/></item><item><title>Math behind simple Linear Regression</title><link>https://bigelectrons.com/post/math/linear-regression/</link><pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/math/linear-regression/</guid><description>
I have been wondering on how the math behind a Linear regression works as in most of the ML books that you encounter, the focus will be on giving you a linear equation and just plugging this equation in a Python library to solve for the slope and bias and then use it to predict the new values. It is very rare that they show you how to find the m and b values.</description></item><item><title>Liner Interpolation</title><link>https://bigelectrons.com/post/math/liner-interpolation/</link><pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate><guid>https://bigelectrons.com/post/math/liner-interpolation/</guid><description>
In mathematics, linear interpolation is understood as a method of curve fitting using linear polynomials. A polynomial is just an expression that consists of variables along with their co-efficients. An example of a polynomial would be:
1x+2y&amp;amp;sup2 In the above equation, the variable x has 1 as its coefficient, the variable y has 2 as its coefficient. Let us assume that we have a set of linear data points pointing to the x and y-axis:</description></item></channel></rss>